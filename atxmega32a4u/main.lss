
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060e  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c1  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000152  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
   4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  54:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  5c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  68:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  6c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  70:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  7c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  80:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  84:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  8c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  90:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  94:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  98:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  9c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  ac:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  b0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  b4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  b8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  bc:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  c0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  c4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  c8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  cc:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  d0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  d4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  d8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  dc:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  e0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  e4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  e8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  ec:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  f0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  f4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  f8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  fc:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 100:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 104:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 108:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 10c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 110:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 114:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 118:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 11c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 120:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 124:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 128:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 12c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 130:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 134:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 138:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 13c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 140:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 144:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 148:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 14c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 150:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 154:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 158:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 15c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 160:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 164:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 168:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 16c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 170:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
 174:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
 17e:	df e2       	ldi	r29, 0x2F	; 47
 180:	de bf       	out	0x3e, r29	; 62
 182:	cd bf       	out	0x3d, r28	; 61
 184:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
 188:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

0000018c <__bad_interrupt>:
 18c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000190 <clock_setup>:
	spi_setup();
}

void clock_setup() {
	//configure clock to 32MHz
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
 190:	80 91 50 00 	lds	r24, 0x0050
 194:	86 60       	ori	r24, 0x06	; 6
 196:	80 93 50 00 	sts	0x0050, r24
	while (!(OSC.STATUS & OSC_RC32KRDY_bm));
 19a:	80 91 51 00 	lds	r24, 0x0051
 19e:	82 ff       	sbrs	r24, 2
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <clock_setup+0xa>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
 1a2:	80 91 51 00 	lds	r24, 0x0051
 1a6:	81 ff       	sbrs	r24, 1
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <clock_setup+0x12>
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 60 00 	sts	0x0060, r24
	CCP = CCP_IOREG_gc;
 1b0:	98 ed       	ldi	r25, 0xD8	; 216
 1b2:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 1b4:	80 93 40 00 	sts	0x0040, r24
	OSC.CTRL &= ~OSC_RC2MEN_bm;
 1b8:	80 91 50 00 	lds	r24, 0x0050
 1bc:	8e 7f       	andi	r24, 0xFE	; 254
 1be:	80 93 50 00 	sts	0x0050, r24
 1c2:	08 95       	ret

000001c4 <setup>:
}

void io_setup() {
	PORTB.OUT = 0x00;
 1c4:	e0 e2       	ldi	r30, 0x20	; 32
 1c6:	f6 e0       	ldi	r31, 0x06	; 6
 1c8:	14 82       	std	Z+4, r1	; 0x04
	PORTB.DIR = 0x0F;
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	80 83       	st	Z, r24
	//PORTB.PIN0CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc);
	//PORTB.PIN1CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc);
	//PORTB.PIN2CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc);
	//PORTB.PIN3CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc);
	PORTB.INT0MASK = 0x0;
 1ce:	12 86       	std	Z+10, r1	; 0x0a
	PORTB.INT1MASK = 0x0;
 1d0:	13 86       	std	Z+11, r1	; 0x0b
	}
}

void setup() {
	io_setup();
	clock_setup();
 1d2:	0e 94 c8 00 	call	0x190	; 0x190 <clock_setup>
	PORTB.INT0MASK = 0x0;
	PORTB.INT1MASK = 0x0;
}

void spi_setup() {
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
 1d6:	81 e5       	ldi	r24, 0x51	; 81
 1d8:	80 93 c0 08 	sts	0x08C0, r24
 1dc:	08 95       	ret

000001de <io_setup>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
	OSC.CTRL &= ~OSC_RC2MEN_bm;
}

void io_setup() {
	PORTB.OUT = 0x00;
 1de:	e0 e2       	ldi	r30, 0x20	; 32
 1e0:	f6 e0       	ldi	r31, 0x06	; 6
 1e2:	14 82       	std	Z+4, r1	; 0x04
	PORTB.DIR = 0x0F;
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	80 83       	st	Z, r24
	//PORTB.PIN0CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc);
	//PORTB.PIN1CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc);
	//PORTB.PIN2CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc);
	//PORTB.PIN3CTRL = (PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc);
	PORTB.INT0MASK = 0x0;
 1e8:	12 86       	std	Z+10, r1	; 0x0a
	PORTB.INT1MASK = 0x0;
 1ea:	13 86       	std	Z+11, r1	; 0x0b
 1ec:	08 95       	ret

000001ee <spi_setup>:
}

void spi_setup() {
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
 1ee:	81 e5       	ldi	r24, 0x51	; 81
 1f0:	80 93 c0 08 	sts	0x08C0, r24
 1f4:	08 95       	ret

000001f6 <main>:
#define SPI_SS2 PORTA.PIN2_bm
#define SPI_SS3 PORTA.PIN1_bm
#define SPI_SS4 PORTA.PIN0_bm // SDMMC on SS4

int main(void) {
	setup();
 1f6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <setup>
	for(;;) {
		PORTB.OUT = LED_YELLOW_gc;
		_delay_ms(1000);
		PORTB.OUT = LED_RED_gc;
 1fa:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(1000);
		PORTB.OUT = LED_GREEN_gc;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
#define SPI_SS4 PORTA.PIN0_bm // SDMMC on SS4

int main(void) {
	setup();
	for(;;) {
		PORTB.OUT = LED_YELLOW_gc;
 1fe:	10 92 24 06 	sts	0x0624, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	37 ea       	ldi	r19, 0xA7	; 167
 206:	41 e6       	ldi	r20, 0x61	; 97
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	30 40       	sbci	r19, 0x00	; 0
 20c:	40 40       	sbci	r20, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x12>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x1c>
 212:	00 00       	nop
		_delay_ms(1000);
		PORTB.OUT = LED_RED_gc;
 214:	90 93 24 06 	sts	0x0624, r25
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	37 ea       	ldi	r19, 0xA7	; 167
 21c:	41 e6       	ldi	r20, 0x61	; 97
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	30 40       	sbci	r19, 0x00	; 0
 222:	40 40       	sbci	r20, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x28>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x32>
 228:	00 00       	nop
		_delay_ms(1000);
		PORTB.OUT = LED_GREEN_gc;
 22a:	80 93 24 06 	sts	0x0624, r24
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	37 ea       	ldi	r19, 0xA7	; 167
 232:	41 e6       	ldi	r20, 0x61	; 97
 234:	21 50       	subi	r18, 0x01	; 1
 236:	30 40       	sbci	r19, 0x00	; 0
 238:	40 40       	sbci	r20, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x3e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x48>
 23e:	00 00       	nop
 240:	de cf       	rjmp	.-68     	; 0x1fe <main+0x8>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
